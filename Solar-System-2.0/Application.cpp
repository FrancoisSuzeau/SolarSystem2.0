/*
AUTHOR : SUZEAU FranÃ§ois

DATE : 26/05/2021

MODULE : Application

NAMEFILE : Application.hpp

PURPOSE :   - creating OpenGL Context
            - Intialise all object of the scene
            - manage event and interaction
*/

#include "Application.hpp"

/***********************************************************************************************************************************************************************/
/*********************************************************************** Constructor and Destructor ********************************************************************/
/***********************************************************************************************************************************************************************/
Application::Application(int width, int height, SDL_Window *window): m_state(nullptr), m_window(window), m_data_manager(), m_engines_manager()
//m_setting(), m_overlay(), m_audio(nullptr), camera(nullptr), m_skybox(nullptr), ship(nullptr)
{
    if (m_state == nullptr)
    {
        m_state = new Engine::State(width, height, 45.0);
        assert(m_state);

    }

    /*render_menu = false;
    menu_app_key_pressed = false;

    if(m_audio == nullptr)
    {
        m_audio = new Audio();
        assert(m_audio);
    }*/
}

Application::~Application()
{

}

/***********************************************************************************************************************************************************************/
/*************************************************************************************** cleanAll **********************************************************************/
/***********************************************************************************************************************************************************************/
void Application::cleanAll()
{
    if (m_state != nullptr)
    {
        m_state->clean();
        delete m_state;
        m_state = nullptr;
    }
    m_data_manager.clean(PREFERENCE);
    m_data_manager.clean(BODIESDATA);

    m_engines_manager.cleanAllEngines();
    /*if(m_skybox != nullptr)
    {
        m_skybox->clean();
        delete m_skybox;
        m_skybox = nullptr;
    }
    if(camera != nullptr)
    {
        delete camera;
        camera = nullptr;
    }
    if(ship != nullptr)
    {
        ship->clean();
        delete ship;
        ship = nullptr;
    }
    
    if(m_audio != nullptr)
    {
        m_audio->clean();
        delete m_audio;
        m_audio = nullptr;
    }

    m_setting.clean();
    m_overlay.clean();

    if(m_solar_system != nullptr)
    {
        m_solar_system->cleanSystem();
        delete m_solar_system;
        m_solar_system = nullptr;
    }*/
}

///***********************************************************************************************************************************************************************/
///*********************************************************************************** initEngines ***********************************************************************/
///***********************************************************************************************************************************************************************/
void Application::initEngines()
{
    m_engines_manager.initGUIEngine();
    if (m_state != nullptr)
    {
        m_engines_manager.initRenderEngine(m_state);
    }
}

///***********************************************************************************************************************************************************************/
///*************************************************************************************** loadConfig ********************************************************************/
///***********************************************************************************************************************************************************************/
void Application::loadConfig()
{
    m_data_manager.setConfigs(m_state);
    m_data_manager.setTextures();
}

///***********************************************************************************************************************************************************************/
///*************************************************************************************** startLoop *********************************************************************/
///***********************************************************************************************************************************************************************/
void Application::loadAssets()
{
//    Square                  *square = nullptr;
    for(int assets_loads = -1; assets_loads < 11; assets_loads++)
    {
        ImGui_ImplOpenGL3_NewFrame();
        ImGui_ImplSDL2_NewFrame();
        ImGui::NewFrame();

        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

        /*if(assets_loads == 0)
        {
            square_renderer = new SquareRenderer(1.0);
            assert(square_renderer);
            square = new Square(1.0, "square");
            assert(square);
            planete_renderer = new PlaneteRenderer(1.f, 70.f, 70.f);
            assert(planete_renderer);
            ring_renderer = new RingRenderer();
            assert(ring_renderer);
            sphere_renderer = new SphereRenderer(1.f, 70.f, 70.f);
            assert(sphere_renderer);

            m_overlay.initOverlayAssets(square_renderer, square);
            m_skybox = new Skybox();
            assert(m_skybox);
            ship = new Spaceship("model");
            assert(ship);
            ship->loadModelShip(m_data_manager);
            
            camera = new Camera(glm::vec3(0.f, 0.f, 0.f), glm::vec3(0.f, 0.f, 0.f), glm::vec3(0.f, 0.f, 1.f), ship);
            assert(camera);

            DataManager::initDatas();

            m_solar_system = new SolarSystemCreator();
            assert(m_solar_system);
            bool success = m_solar_system->MakingSystem(planete_renderer, ring_renderer, sphere_renderer, "Solar System");
            assert(success);
        }*/
//
//        if((assets_loads >= 0) && (assets_loads < 8) && m_solar_system != nullptr) { m_solar_system->loadSystem(assets_loads);}

        Engine::GUI::GUIManager::renderScreenLoad(assets_loads);
        ImGui::Render();
        ImGui_ImplOpenGL3_RenderDrawData(ImGui::GetDrawData());
        SDL_GL_SwapWindow(m_window);
        SDL_Delay(1000);

        if(assets_loads == 10) { SDL_Delay(1000);}
    }
}

///***********************************************************************************************************************************************************************/
///*************************************************************************************** mainLoop **********************************************************************/
///***********************************************************************************************************************************************************************/
void Application::mainLoop()
{
    while(!m_state->getTerminate())
    {
            this->fpsCalculation(BEGIN);
//
//        /******************************************************************* MANAGING EVENTS ******************************************************************/
            this->manage_state();
            //        //=====================================================================================================================================================
            //
            //        /******************************************************************* MANAGING CHANGES *****************************************************************/
            //            this->makeAllChanges();
            //        //=====================================================================================================================================================
            //
            //        /******************************************************************* RENDER AUDIO **********************************************************************/
            //            this->renderAudio();
            //        //======================================================================================================================================================
            //
            //        /******************************************************************* IMGUI PIPELINE ********************************************************************/
                        ImGui_ImplOpenGL3_NewFrame();
                        ImGui_ImplSDL2_NewFrame();
                        ImGui::NewFrame();
            //        //======================================================================================================================================================
            //
            //        /******************************************************************* DEPTH MAP CALCULATION *************************************************************/
            glClearColor(0.1f, 0.1f, 0.1f, 1.0f);
            glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
            glEnable(GL_BLEND);
            glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
            //            
            //            m_data_manager.setPass(DEPTH_FBO);
            //            this->renderIntoFramebuffer(DEPTH_FBO);
            //        //======================================================================================================================================================
            //
            //        /******************************************************************* RENDER SYSTEM *********************************************************************/
            //            m_data_manager.setPass(COLOR_FBO);
            //            this->renderIntoFramebuffer(COLOR_FBO);
            //        //======================================================================================================================================================
            //
            //        /******************************************************************* RENDER SETTINGS *******************************************************************/
            //            this->renderSettings();
            //        //======================================================================================================================================================
            //
            //        /******************************************************************* RENDER OVERLAY ********************************************************************/
            //            this->renderOverlay();
                        m_engines_manager.manageGUI();
            //        //======================================================================================================================================================
            //
            //        /******************************************************************* RENDER OVERLAY ********************************************************************/
            //            this->renderNameAndInfo();
            //        //======================================================================================================================================================
            //
            //        /******************************************************************* RENDER FLARE ********************************************************************/
            //            this->renderFlare();
            //        //======================================================================================================================================================
            //
            //            m_framebuffer->unbindFramebuffer();
            //            m_framebuffer->renderFrame(m_data_manager);
            //
            //        /******************************************************************* SWAPPING WINDOWS *******************************************************************/
                        ImGui::Render();
                        ImGui_ImplOpenGL3_RenderDrawData(ImGui::GetDrawData());
                        SDL_GL_SwapWindow(m_window);
            //        //=======================================================================================================================================================
            //
            this->fpsCalculation(END);
    }
}

///***********************************************************************************************************************************************************************/
///******************************************************************************** renderIntoFramebuffer ***********************************************************************/
///***********************************************************************************************************************************************************************/
//void Application::renderIntoFramebuffer(int type)
//{
//    m_framebuffer->bindFramebuffer(type);
//    
//
//        if(m_data_manager.getPass() == DEPTH_FBO)
//        {
//            glViewport(0, 0, m_data_manager.getWidth(), m_data_manager.getWidth());
//            glClear(GL_DEPTH_BUFFER_BIT);
//            glCullFace(GL_FRONT);
//        }
//        else
//        {
//            glViewport(0, 0, m_data_manager.getWidth(), m_data_manager.getHeight());
//            glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
//        }
//
//        /******************************************************************* RENDER SCENE *********************************************************************/
//            this->renderScene();
//        //======================================================================================================================================================
//
//        if(m_data_manager.getPass() == DEPTH_FBO)
//        {
//            glCullFace(GL_BACK);
//            m_framebuffer->unbindFramebuffer();
//        }
//}
//
///***********************************************************************************************************************************************************************/
///******************************************************************************** makeAllChanges ***********************************************************************/
///***********************************************************************************************************************************************************************/
//void Application::makeAllChanges()
//{
//    if((ship != nullptr) && (m_input != nullptr))
//    {
//        if((!render_menu))
//        {
//            ship->transform(glm::vec3(0.f), m_input);
//            ship->sendToShader(m_data_manager);
//            m_data_manager.setShipPos(ship->getPosition());
//            m_data_manager.setShipOrientation(ship->getOrientation());
//        }
//        ship->loadModelShip(m_data_manager);
//    }
//
//    if((camera != nullptr) && (m_input != nullptr))
//    {
//        camera->setDistFromShip(m_data_manager.getDistancteFromShip());
//        camera->move(m_input, render_menu);
//        m_data_manager.setViewMat(camera->getViewMatrix());
//        m_data_manager.setCamPos(camera->getPosition());
//    }
//
//    if(m_skybox != nullptr)
//    {
//        m_skybox->sendToShader(m_data_manager);
//    }
//
//    if(m_solar_system != nullptr)
//    {
//        m_solar_system->makeChanges(m_data_manager);
//    }
//
//    std::vector<glm::mat4> shadowTransforms = m_data_manager.getLightSpaceMatrix();
//    glUseProgram(m_data_manager.getShader("depth_map")->getProgramID());
//        for(int i = 0; i < 6; ++i)
//        {
//            m_data_manager.getShader("depth_map")->setMat4("shadowMatrices[" + std::to_string(i) + "]", shadowTransforms[i]);
//        }
//        m_data_manager.getShader("depth_map")->setFloat("far_plane", m_data_manager.getFar());
//        m_data_manager.getShader("depth_map")->setVec3("sunPos", m_data_manager.getSunPos());
//    glUseProgram(0);
//}
//
///***********************************************************************************************************************************************************************/
///*********************************************************************************** renderAudio ***********************************************************************/
///***********************************************************************************************************************************************************************/
//void Application::renderAudio()
//{
//    if(m_audio != nullptr)
//    {
//        m_audio->changeVolume(m_data_manager.getVolume());
//        m_audio->pause(m_data_manager.getPause());
//        m_audio->updateTrack(m_data_manager);
//    }
//}
//
///***********************************************************************************************************************************************************************/
///*********************************************************************************** fpsCalculation ********************************************************************/
///***********************************************************************************************************************************************************************/
void Application::fpsCalculation(int moment)
{
    
    switch (moment)
    {
    case BEGIN:
        start_loop = SDL_GetTicks();
        break;

    case END:
        end_loop = SDL_GetTicks();
        time_past = end_loop - start_loop;
        if (time_past < frame_rate)
        {
            SDL_Delay(frame_rate - time_past);
        }
        frame_rate = 1000 / m_state->getFps();
        break;

    default:
        break;
    }
}

///***********************************************************************************************************************************************************************/
///*********************************************************************************** renderScene ***********************************************************************/
///***********************************************************************************************************************************************************************/
//void Application::renderOverlay()
//{
//    if(m_data_manager.getRenderOverlay())
//    {
//        glm::mat4 save = m_data_manager.getViewMat();
//        m_data_manager.lockView(glm::vec3(0.0f, 0.0f, -1.1f), glm::vec3(0.0f, 0.0f, 0.0f), glm::vec3(0.0f, 1.0f, 0.0f));
//        m_overlay.renderEdges(m_data_manager);
//        m_data_manager.resetViewMat(save);
//
//        m_overlay.renderAppInfo();
//
//        m_overlay.renderMusicInfo(m_data_manager);
//
//        //m_overlay->displayNavigation(render_data);
//    }
//}
//
///***********************************************************************************************************************************************************************/
///*********************************************************************************** renderScene ***********************************************************************/
///***********************************************************************************************************************************************************************/
//void Application::renderScene()
//{   
//
//    if(!render_menu && (m_data_manager.getPass() == COLOR_FBO))
//    {
//        ship->drawSpaceship(m_data_manager);
//    }
//    if(m_skybox != nullptr)
//    {
//        m_skybox->render(m_data_manager);
//    }
//
//    if(m_solar_system != nullptr)
//    {
//        m_solar_system->render(m_data_manager);
//        m_solar_system->renderRing(m_data_manager);
//        m_solar_system->renderAtmosphere(m_data_manager);
//    }
//}
//
///***********************************************************************************************************************************************************************/
///*********************************************************************************** manage_state **********************************************************************/
///***********************************************************************************************************************************************************************/
void Application::manage_state()
{
    m_state->listenEvents();
}

///***********************************************************************************************************************************************************************/
///*********************************************************************************** renderNameAndInfo *********************************************************************/
///***********************************************************************************************************************************************************************/
//void Application::renderNameAndInfo()
//{
//    m_solar_system->renderNameAndInfo(m_data_manager);
//}
//
///***********************************************************************************************************************************************************************/
///*********************************************************************************** renderFlare *********************************************************************/
///***********************************************************************************************************************************************************************/
//void Application::renderFlare()
//{
//    m_solar_system->renderFlareSun(m_data_manager);
//}

/***********************************************************************************************************************************************************************/
/********************************************************************************* renderParticles *********************************************************************/
/***********************************************************************************************************************************************************************/
// void Application::renderParticles(RenderData &render_data)
// {
//    if(m_particule_manager != nullptr)
//    {
//        m_particule_manager->renderParticules(render_data, ship, m_input);
//    }
// }