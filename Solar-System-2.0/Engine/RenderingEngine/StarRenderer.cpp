/*
AUTHOR : SUZEAU FranÃ§ois

DATE : 18/03/2023

MODULE : Renderer::TexturedRenderers::StarRenderer

NAMEFILE : StarRenderer.cpp

PURPOSE : class StarRenderer

*/


#include "StarRenderer.hpp"
using namespace Engine::RenderingEngine;

/***********************************************************************************************************************************************************************/
/*********************************************************************** Constructor and Destructor ********************************************************************/
/***********************************************************************************************************************************************************************/
StarRenderer::StarRenderer(const float radius, const unsigned int longSegs, const unsigned int latSegs) : super(radius, longSegs, latSegs)
{
    super::name = "STAR RENDERER";
}


StarRenderer::~StarRenderer()
{
    
}

/***********************************************************************************************************************************************************************/
/******************************************************************************** clean ******************************************************************************/
/***********************************************************************************************************************************************************************/
void StarRenderer::clean()
{
    super::clean();
}

/***********************************************************************************************************************************************************************/
/******************************************************************************** render ******************************************************************************/
/***********************************************************************************************************************************************************************/
//void StarRenderer::render(Applications::DataManager &data_manager, Object *star)
//{
//    GLuint t_id = star->getTextureID(0);
//    if(glIsTexture(t_id) == GL_TRUE)
//    {
//        star->sendToShader(data_manager);
//        
//        glActiveTexture(GL_TEXTURE0);
//        glBindTexture(GL_TEXTURE_2D, t_id);
//
//        super::render(data_manager, star);
//
//        glActiveTexture(GL_TEXTURE0);
//        glBindTexture(GL_TEXTURE_2D, 0);
//    }
//    
//}